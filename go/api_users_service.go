/*
 * GreekSchools Data Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"

	"github.com/CoPhi/cophi-auth-service/apikey"
	"github.com/CoPhi/cophi-auth-service/auth"
	"github.com/CoPhi/cophi-auth-service/user"
)

// UsersApiService is a service that implements the logic for the UsersApiServicer
// This service should implement the business logic for every endpoint for the UsersApi API.
// Include any external packages or services that will be required by this service.
type UsersApiService struct {
	db     user.DB
	apikey apikey.Store
}

// NewUsersApiService creates a default api service
func NewUsersApiService(db user.DB, apikey apikey.Store) UsersApiServicer {
	return &UsersApiService{
		db:     db,
		apikey: apikey,
	}
}

func (s *UsersApiService) checkApikey(apikey string) (bool, ImplResponse, error) {
	if apikey == "" {
		return false, Response(401, nil), nil
	}
	if !s.apikey.IsOwner(apikey) {
		return false, Response(403, nil), nil
	}

	return true, ImplResponse{}, nil
}

// UsersGet -
func (s *UsersApiService) UsersGet(ctx context.Context, apiKey string) (ImplResponse, error) {
	if b, res, err := s.checkApikey(apiKey); !b {
		return res, err
	}

	us, err := s.db.List()
	if err != nil {
		return Response(500, nil), err
	}

	return Response(201, us), nil
}

// UsersIdDelete -
func (s *UsersApiService) UsersIdDelete(ctx context.Context, apiKey string, id string) (ImplResponse, error) {
	if b, res, err := s.checkApikey(apiKey); !b {
		return res, err
	}

	s.db.Delete(id)
	return Response(200, nil), nil
}

// UsersIdGet -
func (s *UsersApiService) UsersIdGet(ctx context.Context, apiKey string, id string) (ImplResponse, error) {
	if b, res, err := s.checkApikey(apiKey); !b {
		return res, err
	}

	u, err := s.db.GetByID(id)
	if err != nil {
		switch err {
		case user.UserNotFound:
			return Response(404, nil), err
		default:
			return Response(500, nil), err
		}
	}

	return Response(200, u), nil
}

// UsersPost -
func (s *UsersApiService) UsersPost(ctx context.Context, apiKey string, us User) (ImplResponse, error) {
	if b, res, err := s.checkApikey(apiKey); !b {
		return res, err
	}

	u := user.NewUser(auth.AuthUser{
		Name: us.Name, LastName: us.Lastname, Email: us.Lastname,
	})

	err := s.db.Add(u)
	if err != nil {
		return Response(500, nil), nil
	}

	return Response(201, nil), nil
}
