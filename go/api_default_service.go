/*
 * GreekSchools Data Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
	"time"

	"github.com/CoPhi/cophi-auth-service/jwt"
	refreshtoken "github.com/CoPhi/cophi-auth-service/refreshtoken"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	rtStore refreshtoken.RefreshTokenStore
	privKey string
	pubKey  string
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(pubKey, privKey string, rtStore refreshtoken.RefreshTokenStore) DefaultApiServicer {
	return &DefaultApiService{
		pubKey:  pubKey,
		privKey: privKey,
		rtStore: rtStore,
	}
}

// JwtPublicKeysGet -
func (s *DefaultApiService) JwtPublicKeysGet(ctx context.Context) (ImplResponse, error) {
	return Response(http.StatusOK, PublicKey{s.pubKey}), nil
}

// JwtRefreshPost -
func (s *DefaultApiService) JwtRefreshPost(ctx context.Context, refreshToken string, accessToken string) (ImplResponse, error) {
	path := "/jwt/refresh"

	// if !s.rtStore.Valid(refreshToken) { // TODO: return 401
	// 	return Response(500, ModelError{Timestamp: time.Now(), Message: "Infalid refresh token", Error: "Invalid refresh token", Path: path}), nil
	// }
	token, err := jwt.VerifyToken(accessToken, s.pubKey)
	switch err {
	case nil: // Token is still valid
		claims, ok := token.Claims.(*jwt.Claims)
		if !ok {
			return Response(http.StatusInternalServerError, ModelError{Timestamp: time.Now(), Message: "malformed claims", Error: "malformed claims", Path: path}), nil
		}
		if !s.rtStore.IsOwner(refreshToken, claims.Email) {
			return Response(http.StatusForbidden, ModelError{Timestamp: time.Now(), Message: "forbidden", Error: "forbidden", Path: path}), nil
		}

		// TODO: update api to manage bad request if issued token is still valid and remove 400 response
		return Response(http.StatusOK, Token{Token: accessToken, RefreshToken: refreshToken}), nil

	case jwt.Expired:
		claims, ok := token.Claims.(*jwt.Claims)
		if !ok {
			return Response(http.StatusInternalServerError, ModelError{Timestamp: time.Now(), Message: "malformed claims", Error: "malformed claims", Path: path}), nil
		}
		newToken, err := jwt.GenerateToken(claims.Name, claims.LastName, claims.Email, time.Minute, s.privKey) // TODO put expiration time as parameter in DeafaultApiService
		if err != nil {
			return Response(http.StatusInternalServerError, ModelError{Timestamp: time.Now(), Message: err.Error(), Error: err.Error(), Path: path}), nil
		}
		s.rtStore.ExpirationTime(refreshToken)
		return Response(http.StatusOK, Token{Token: newToken, RefreshToken: refreshToken}), nil

	default:
		return Response(http.StatusInternalServerError, ModelError{Timestamp: time.Now(), Message: err.Error(), Error: err.Error(), Path: path}), nil

	}
}

// RevokePost -
func (s *DefaultApiService) RevokePost(ctx context.Context, apiKey string, inlineObject InlineObject) (ImplResponse, error) {
	// TODO - update RevokePost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	//return Response(403, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	//TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	//return Response(500, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("RevokePost method not implemented")
}

// StatusGet -
func (s *DefaultApiService) StatusGet(ctx context.Context) (ImplResponse, error) {
	return Response(200, Status{Status: "running", Version: "1.0.0"}), nil
}
