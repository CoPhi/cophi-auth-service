/*
 * GreekSchools Data Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UsersApiController binds http requests to an api service and writes the service results to the http response
type UsersApiController struct {
	service UsersApiServicer
	errorHandler ErrorHandler
}

// UsersApiOption for how the controller is set up.
type UsersApiOption func(*UsersApiController)

// WithUsersApiErrorHandler inject ErrorHandler into controller
func WithUsersApiErrorHandler(h ErrorHandler) UsersApiOption {
	return func(c *UsersApiController) {
		c.errorHandler = h
	}
}

// NewUsersApiController creates a default api controller
func NewUsersApiController(s UsersApiServicer, opts ...UsersApiOption) Router {
	controller := &UsersApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the UsersApiController
func (c *UsersApiController) Routes() Routes {
	return Routes{ 
		{
			"UsersGet",
			strings.ToUpper("Get"),
			"/api/v1/users",
			c.UsersGet,
		},
		{
			"UsersIdDelete",
			strings.ToUpper("Delete"),
			"/api/v1/users/{id}",
			c.UsersIdDelete,
		},
		{
			"UsersIdGet",
			strings.ToUpper("Get"),
			"/api/v1/users/{id}",
			c.UsersIdGet,
		},
		{
			"UsersPost",
			strings.ToUpper("Post"),
			"/api/v1/users",
			c.UsersPost,
		},
	}
}

// UsersGet - 
func (c *UsersApiController) UsersGet(w http.ResponseWriter, r *http.Request) {
	apiKeyParam := r.Header.Get("api-key")
	result, err := c.service.UsersGet(r.Context(), apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersIdDelete - 
func (c *UsersApiController) UsersIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	apiKeyParam := r.Header.Get("api-key")
	idParam := params["id"]
	
	result, err := c.service.UsersIdDelete(r.Context(), apiKeyParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersIdGet - 
func (c *UsersApiController) UsersIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	apiKeyParam := r.Header.Get("api-key")
	idParam := params["id"]
	
	result, err := c.service.UsersIdGet(r.Context(), apiKeyParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersPost - 
func (c *UsersApiController) UsersPost(w http.ResponseWriter, r *http.Request) {
	apiKeyParam := r.Header.Get("api-key")
	userParam := User{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersPost(r.Context(), apiKeyParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
